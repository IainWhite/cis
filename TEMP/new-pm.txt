
Yum - Yellowdog Updater, Modified
The Yellowdog Updater, Modified (yum) is an open-source command-line package-management utility for [Linux] operating systems using the [RPM] Package Manager. Though yum has a command-line interface, several other tools provide graphical user interfaces to yum functionality.

Yum allows automatic updates, package and dependency management, on RPM-based distributions. Like the Advanced Packaging Tool (APT) from [Debian], yum works with software repositories (collections of packages), which can be accessed locally or over a network connection.

Under the hood, yum depends on RPM, which is a packaging standard for digital distribution of software, which automatically uses hashes and digisigs to verify the authorship and integrity of said software; unlike some app stores, which serve a similar function, neither yum nor RPM provide built-in support for proprietary restrictions on copying of packages by endusers. Yum is implemented as libraries in the Python programming language, with a small set of programs that provide a command-line interface. GUI-based wrappers such as Yum Extender (yumex) also exist. A rewrite of yum based on libsolv named DNF is currently being developed and expected to replace yum as the default package manager in Fedora 22.
===

RPM Package Manager 
RPM Package Manager (RPM) (originally Red Hat Package Manager; now a recursive initialism) is a package management system. The name RPM variously refers to the .rpm file format, files in this format, software packaged in such files, and the package manager itself. RPM was intended primarily for Linux distributions; the file format is the baseline package format of the Linux Standard Base.

Even though it was created for use in Red Hat Linux, RPM is now used in many GNU/Linux distributions. It has also been ported to some other operating systems, such as Novell NetWare (as of version 6.5 SP3) and IBM's AIX (as of version 4).
===

TypeScript
TypeScript is a free and open source programming language developed and maintained by [Microsoft]. It is a strict superset of [JavaScript], and adds optional static typing and class-based object-oriented programming to the language. Anders Hejlsberg, lead architect of [C#] and creator of [Delphi] and [Turbo Pascal], has worked on the development of TypeScript. TypeScript may be used to develop JavaScript applications for client-side or server-side ([Node.js]) execution.

TypeScript is designed for development of large applications and transcompiles to JavaScript. As TypeScript is a superset of JavaScript, any existing JavaScript programs are also valid TypeScript programs.

TypeScript supports header files which can contain type information of existing JavaScript libraries, enabling other programs to use objects defined in the header files as if they were strongly typed TypeScript objects. There are third-party header files for popular libraries like [jQuery], [MongoDB], [D3.js]. TypeScript headers for the Node.js basic modules are also available, allowing development of Node.js programs within TypeScript.

The TypeScript compiler is itself written in JavaScript, and licensed under the [Apache 2 License].

TypeScript is included as a first-class programming language in Microsoft [Visual Studio] 2013 Update 2 and later, beside C# and other Microsoft languages. An official extension allows Visual Studio 2012 to support TypeScript as well.
===

Dart Programming Language
Dart is an open-source Web programming language developed by [Google]. It was unveiled at the GOTO conference in Aarhus, Denmark, 10 - 12 October 2011. In order to run in mainstream browsers, Dart relies on a source-to-source compiler to [JavaScript]. According to the project site, Dart was "designed to be easy to write development tools for, well-suited to modern app development, and capable of high-performance implementations."

Dart is a class-based, single-inheritance, object-oriented language with C-style syntax. It supports interfaces, abstract classes, reified generics, and optional typing. Static type annotations do not affect the runtime semantics of the code. Instead, the type annotations can provide documentation for tools like static checkers and dynamic runtime checks.
===

