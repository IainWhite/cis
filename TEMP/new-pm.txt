CodeIgniter PHP Framework
CodeIgniter is an open source rapid development web application framework, for use in building dynamic web sites with [PHP].

CodeIgniter is loosely based on the popular [Model-View-Controller] [development pattern]. While controller classes are a necessary part of development under CodeIgniter, models and views are optional.

CodeIgniter is most often noted for its speed when compared to other [PHP frameworks]. In a critical take on PHP frameworks in general, PHP creator [Rasmus Lerdorf] spoke at frOSCon in August 2008, noting that he liked CodeIgniter "<em>because it is faster, lighter and the least like a framework</em>"

The first public version of CodeIgniter was released by EllisLab on 28 February 2006, and the latest stable version 3.0.0 was released 30 March 30, 2015. On 9 July 2013, EllisLab announced that it was seeking a new owner for CodeIgniter, citing a lack of resources to give the framework the attention they felt it deserved. On 6 October 2014, EllisLab announced that CodeIgniter would continue development under the stewardship of the British Columbia Institute of Technology.
===

Laravel PHP Framework
Laravel is a free, open-source [PHP] web application framework, created by Taylor Otwell and intended for the development of web applications following the [model–view–controller] (MVC) architectural pattern. Prominent Laravel features include its expressive syntax, a modular packaging system with a dedicated dependency manager, different ways for accessing relational databases, and various utilities that aid in application deployment and maintenance.

According to a March 2015 developers survey on PHP frameworks popularity, Laravel was listed as the most popular PHP framework of 2015, followed by [Symfony2], Nette, [CodeIgniter], [Yii] and others.

Laravel was created by Taylor Otwell as a more feature-rich alternative to the CodeIgniter framework, which did not provide various advanced features such as support for user authentication and authorization. Laravel's first beta release was made available on 9 June 2011, followed by the Laravel 1 release later in the same month. Laravel 1 includes built-in support for authentication, localisation, models, views, sessions, routing and other mechanisms, but lacks support for controllers that prevents it from being a true MVC framework.

Laravel 2 was released in September 2011, bringing various improvements from the author and community. Major new features include the support for controllers, which made Laravel 2 a fully MVC-compliant framework, built-in support for the [inversion of control] (IoC) principle, and the so-called "Blade" templating system. As a downside, support for third-party packages was removed in Laravel 2.

Laravel 3 was released in February 2012 with a set of new features including the [command-line interface] (CLI) named "Artisan", built-in support for more database management systems, database migrations as a form of version control for database layouts, support for handling events, and a packaging system called "Bundles". A significant increase of the Laravel's userbase and popularity lined up with the release of Laravel 3.

Laravel 4, codenamed "Illuminate", was released in May 2013. It was made as a complete rewrite of the Laravel framework, migrating its layout into a set of separate packages distributed through [Composer], which serves as an application-level package manager. Such a layout allowed much better extendibility of Laravel 4, paired with its official regular release schedule spanning six months between minor point releases. Other new features in the Laravel 4 release include database seeding for the initial population of databases, support for message queues, built-in support for sending different types of email, and support for delayed deletion of database records called "soft deletion".

Laravel 5 was released in February 2015 as a result of significant changes that ended up in renumbering the then future Laravel 4.3 release. Beside bringing various new features and improvements to already existing ones, Laravel 5 also introduced a new internal directory tree structure for developed applications. New features in the Laravel 5 release include support for scheduling periodically executed tasks through a package called "Scheduler", an abstraction layer called "Flysystem" that allows remote storage to be used in the same way as local file systems, improved handling of package assets through "Elixir", and simplified externally handled authentication through the optional "Socialite" package.

Laravel 5.1, released in June 2015, is the first release of Laravel to receive long-term support (LTS), with planned availability of bug fixes for two years and security patches for three years. LTS releases of Laravel are planned to be released every two years.
===

Design Patterns

<p>A <strong>design pattern</strong> is a general reusable solution to a commonly occurring problem within a given context in software design.</p>
<p>A design pattern is not a finished design that can be transformed directly into source or machine code. It is a description or template for how to solve a problem that can be used in many different situations. Patterns are formalised best practices that the programmer can use to solve common problems when designing an application or system. Object-oriented design patterns typically show relationships and interactions between classes or objects, without specifying the final application classes or objects that are involved. Patterns that imply object-orientation or, more generally, mutable state, are not as applicable in functional programming languages.</p>
<p>Patterns originated as an architectural concept by <strong>Christopher Alexander</strong> (1977 / 79). In 1987, <strong>Kent Beck</strong> and <strong>Ward Cunningham</strong> began experimenting with the idea of applying patterns to programming - specifically pattern languages - and presented their results at the OOPSLA conference that year. In the following years, Beck, Cunningham and others followed up on this work.</p>
<p>Design patterns gained popularity in computer science after the book [Design Patterns: Elements of Reusable Object-Oriented Software] was published in 1994 by the so-called "[Gang of Four]", which is frequently abbreviated as "GoF". That same year, the first Pattern Languages of Programming Conference was held and the following year, the <strong>Portland Pattern Repository</strong> was set up for documentation of design patterns.</p>

<h2>Patterns By Type</h2>

<h3>[Creational patterens]<h3>
<p>Creational patterns are ones that create objects for you, rather than having you instantiate objects directly. This gives your program more flexibility in deciding which objects need to be created for a given case.</p>

<ul>
	<li>[Abstract factory] pattern groups object factories that have a common theme.</li>
	<li>[Builder] pattern constructs complex objects by separating construction and representation.</li>
	<li>[Factory method] pattern creates objects without specifying the exact class to create.</li>
	<li>[Prototype] pattern creates objects by cloning an existing object.</li>
	<li>[Singleton] pattern restricts object creation for a class to only one instance.</li>
	<li>[Lazy initialisation] tactic of delaying the creation of an object, the calculation of a value, or some other expensive process until the first time it is needed. This pattern appears in the GoF catalog as "virtual proxy", an implementation strategy for the Proxy pattern.</li>
	<li>[Multiton] ensure a class has only named instances, and provide a global point of access to them.</li>
	<li>[Object pool] avoid expensive acquisition and release of resources by recycling objects that are no longer in use. Can be considered a generalisation of connection pool and thread pool patterns.</li>
	<li>[Resource acquisition is initialisation] ensure that resources are properly released by tying them to the lifespan of suitable objects.</li>
</ul>

<h3>[Structural patterens]</h3>
<p>These concern class and object composition. They use inheritance to compose interfaces and define ways to compose objects to obtain new functionality.</p>

<ul>
	<li>[Adapter] allows classes with incompatible interfaces to work together by wrapping its own interface around that of an already existing class.</li>
	<li>[Bridge] decouples an abstraction from its implementation so that the two can vary independently.</li>
	<li>[Composite] composes zero-or-more similar objects so that they can be manipulated as one object.</li>
	<li>[Decorator] dynamically adds / overrides behaviour in an existing method of an object.</li>
	<li>[Facade] provides a simplified interface to a large body of code.</li>
	<li>[Flyweight] reduces the cost of creating and manipulating a large number of similar objects.</li>
	<li>[Proxy] provides a placeholder for another object to control access, reduce cost, and reduce complexity.</li>
	<li>[Front Controller] pattern relates to the design of Web applications. It provides a centralised entry point for handling requests.</li>
	<li>[Module] group several related elements, such as classes, singletons, methods, globally used, into a single conceptual entity.</li>
</ul>

<h3>[Behavioural patterens]</h3>
<p>Most of these design patterns are specifically concerned with communication between objects.</p>

<ul>
	<li>[Chain of responsibility] delegates commands to a chain of processing objects.</li>
	<li>[Command] creates objects which encapsulate actions and parameters.</li>
	<li>[Interpreter] implements a specialised language.</li>
	<li>[Iterator] accesses the elements of an object sequentially without exposing its underlying representation.</li>
	<li>[Mediator] allows loose coupling between classes by being the only class that has detailed knowledge of their methods.</li>
	<li>[Memento] provides the ability to restore an object to its previous state (undo).</li>
	<li>[Observer] is a publish/subscribe pattern which allows a number of observer objects to see an event.</li>
	<li>[State] allows an object to alter its behavior when its internal state changes.</li>
	<li>[Strategy] allows one of a family of algorithms to be selected on-the-fly at runtime.</li>
	<li>[Template] method defines the skeleton of an algorithm as an abstract class, allowing its subclasses to provide concrete behavior.</li>
	<li>[Visitor] separates an algorithm from an object structure by moving the hierarchy of methods into one object.</li>
	<li>[Null object] avoid null references by providing a default object.</li>
	<li>[Servant] define common functionality for a group of classes.</li>
	<li>[Specification] recombinable business logic in a Boolean fashion.</li>
</ul>

<h3>[Concurrency patterens]</h3>
<ul>
	<li>[Active Object] decouples method execution from method invocation that reside in their own thread of control. The goal is to introduce concurrency, by using asynchronous method invocation and a scheduler for handling requests.</li>
	<li>[Balking] only execute an action on an object when the object is in a particular state.</li>
	<li>[Double-checked locking] reduce the overhead of acquiring a lock by first testing the locking criterion (the 'lock hint') in an unsafe manner; only if that succeeds does the actual locking logic proceed.</li>
	<li>[Event-based asynchronous] addresses problems with the asynchronous pattern that occur in multithreaded programs.</li>
	<li>[Guarded suspension] manages operations that require both a lock to be acquired and a precondition to be satisfied before the operation can be executed.</li>
	<li>[Join] provides a way to write concurrent, parallel and distributed programs by message passing. Compared to the use of threads and locks, this is a high level programming model.</li>
	<li>[Lock] one thread puts a "lock" on a resource, preventing other threads from accessing or modifying it.</li>
	<li>[Messaging design pattern (MDP)] allows the interchange of information (i.e. messages) between components and applications.</li>
	<li>[Monitor object] an object whose methods are subject to mutual exclusion, thus preventing multiple objects from erroneously trying to use it at the same time.</li>
	<li>[Reactor] provides an asynchronous interface to resources that must be handled synchronously.</li>
	<li>[Read-write lock] allows concurrent read access to an object, but requires exclusive access for write operations.</li>
	<li>[Scheduler] explicitly control when threads may execute single-threaded code.</li>
	<li>[Thread pool] a number of threads are created to perform a number of tasks, which are usually organized in a queue. Typically, there are many more tasks than threads.
	<li>[Thread-specific storage] static or "global" memory local to a thread.
<ul>
===

ADO - ActiveX Data Objects
Microsoft's ActiveX Data Objects (ADO) comprises a set of [Component Object Model] (COM) objects for accessing data sources. A part of MDAC (Microsoft Data Access Components), it provides a middleware layer between programming languages and OLE DB (a means of accessing data stores, whether databases or not, in a uniform manner). ADO allows a developer to write programs that access data without knowing how the database is implemented; developers must be aware of the database for connection only. No knowledge of [SQL] is required to access a database when using ADO, although one can use ADO to execute SQL commands directly (with the disadvantage of introducing a dependency upon the type of database used).

Microsoft introduced ADO in October 1996, positioning the software as a successor to Microsoft's earlier object layers for accessing data sources, including RDO (Remote Data Objects) and DAO (Data Access Objects).

ADO Collections
Fields
This collection contains a set of Field objects. The Collection can be used in either a Recordset object or in a Record object. In a Recordset object, each of the Field objects that make up the Fields collection corresponds to a column in that Record set object. In a Record object, a Field can be an absolute or relative URL that points into a tree-structured namespace (used for semi-structured data providers like the Microsoft OLE DB Provider for Internet Publishing) or as a reference to the default Stream object associated with that Record object.
Properties
An object can have more than one Property object, which are contained in the object's Properties collection.
Parameters
A Command object can have several Parameter commands to change its predefined behaviour, and each of the Parameter objects are contained in the Command object's Parameters collection
Errors
All provider-created errors are passed to a collection of Error objects, while the Errors collection itself is contained in a Connection object. When an ADO operation creates an error, the collection is cleared and a new group of Error objects is created in the collection.

ADO Objects
Connection
The connection object is ADO's connection to a data store via OLE DB. The connection object stores information about the session and provides methods of connecting to the data store. As some data stores have different methods of establishing a connection, some methods may not be supported in the connection object for particular OLE DB provider. A connection object connects to the data store using its 'Open' method with a connection string which specifies the connection as a list of key value pairs. The start of this connection string must identify the type of data store connection that the connection object requires:
- an OLE DB provider (for example SQLOLEDB), using the syntax "provider=";
- a file name, using the syntax "file name=";
- a remote provider and server (see RDS), using the syntax "Remote provider=" and "Remote server="; or
- an absolute URL, using the syntax "URL="
Command
After the connection object establishes a session to the data source, instructions are sent to the data provider via the command object. The command object can send SQL queries directly to the provider through the use of the CommandText property, send a parameterised query or stored procedure through the use of a Parameter object or Parameters collection or run a query and return the results to a dataset object via the Execute method. There are several other methods that can be used in the Command object relating to other objects, such as the Stream, RecordSet or Connection objects.
Recordset
A recordset is a group of records, and can either come from a base table or as the result of a query to the table. The RecordSet object contains a Fields collection and a Properties collection. The Fields collection is a set of Field objects, which are the corresponding columns in the table. The Properties collection is a set of Property objects, which defines a particular functionality of an OLE DB provider. The RecordSet has numerous methods and properties for examining the data that exists within it. Records can be updated in the recordset by changing the values in the record and then calling on the Update or UpdateBatch method.
Immediate
The recordset is locked using the adLockOptimistic or adLockPessimistic lock. The data are updated at the data source after the record is changed and the Update method is called.
Batch
The recordset is locked using adLockBatchOptimistic and each time Update is called the data are updated in a temporary buffer. Finally, when UpdateBatch is called the data are completely updated back at the data source. This has the advantage of it all being done in memory, and if a problem occurs then UpdateCancel is called and the updates are not sent to the data source
Transaction
If the OLE DB provider allows it, transactions can be used. To start the transaction, the programmer invokes the BeginTrans method and does the required updates. When they are all done, the programmer invokes the CommitTrans method. RollbackTrans can be invoked to cancel any changes made inside the transaction and rollback the database to the state before the transaction began
Record
This object represents one record in the database and contains a fields collection. A RecordSet consists of a collection of Record objects.
Stream
A stream, mainly used in a RecordSet object, is a means of reading and writing a stream of bytes. It is mostly used to save a recordset in an XML format, to send commands to an OLE DB provider as an alternative to the CommandText object and to contain the contents of a binary or text file.
Parameter
A parameter is a means of altering the behaviour of a common piece of functionality, for instance a stored procedure might have different parameters passed to it depending on what needs to be done; these are called parameterised commands.
Field
Each Record object contains many fields, and a RecordSet object has a corresponding Field object also. The RecordSet object's Field object corresponds to a column in the database table that it references.
Property
This object is specific to the OLE DB provider and defines an ability that the provider has implemented. A property object can be either a built-in property — it is a well-defined property implemented by ADO already and thus cannot be altered — or can be a dynamic property — defined by the underlying data provider and can be changed
Error
When an OLE DB provider error occurs during the use of ADO, an Error object will be created in the Errors collection. Other errors do not go into an Error object, however. For instance, any errors that occur when manipulating data in a RecordSet or Field object are stored in a Status property.

[ADO.NET] has replaced ADO in the same way that C#/.NET replaced C/Win32 as the primary mode for targeting Windows application development. ADO.NET follows the same design pattern as ADO, enabling an ADO developer an easy path forward when moving to the [.NET framework].
===
ADO.NET
ADO.NET is a set of computer software components that programmers can use to access data and data services based on disconnected DataSets and [XML].

It is a part of the base class library that is included with the Microsoft [.NET Framework].

It is commonly used by programmers to access and modify data stored in relational database systems, though it can also access data in non-relational sources.

ADO.NET is sometimes considered an evolution of ActiveX Data Objects ([ADO]) technology, but was changed so extensively that it can be considered an entirely new product.
===

Common Language Runtime (CLR)
The Common Language Runtime (CLR), the virtual machine component of Microsoft's [.NET framework], manages the execution of .NET programs. A process known as just-in-time compilation converts compiled code into machine instructions which the computer's CPU then executes. The CLR provides additional services including memory management, type safety, exception handling, garbage collection, security and thread management. All programs written for the .NET framework, regardless of programming language, are executed by the CLR. All versions of the .NET framework include CLR.

CLR implements the Virtual Execution System (VES) as defined in the Common Language Infrastructure (CLI) standard, initially developed by [Microsoft] itself. A public standard defines the Common Language Infrastructure specification.
===

ASP.NET Compared With Classic ASP
[ASP.NET] WebForms simplifies developers' transition from Windows application development to Web development by offering the ability to build pages composed of controls similar to a Windows user interface. A Web control, such as a button or label, functions in very much the same way as its Windows counterparts: code can assign its properties and respond to its events. Controls know how to render themselves: whereas Windows controls draw themselves to the screen, Web controls produce segments of HTML and JavaScript which form parts of the resulting page sent to the end-user's browser.

ASP.NET WebForms encourages the programmer to develop applications using an event-driven [GUI] model, rather than in conventional Web-scripting environments like [ASP] and [PHP]. The framework combines existing technologies such as JavaScript with internal components like "ViewState" to bring persistent (inter-request) state to the inherently stateless Web environment.

Other differences compared to classic ASP are:

- Compiled code means applications run faster with more design-time errors trapped at the development stage.
- Significantly improved run-time error handling, making use of exception handling using try-catch blocks.
- Similar metaphors to Microsoft Windows applications such as controls and events.
- An extensive set of controls and class libraries, as well as user-defined controls, allow the rapid building of applications. Layout of these controls on a page is easier because most of it can be done visually in most editors.
- ASP.NET uses the multi-language abilities of the .NET Common Language Runtime, allowing Web pages to be coded in [VB.NET], [C#], [J#] etc.
- Ability to cache the whole page or just parts of it to improve performance.
- Ability to use the code-behind development model to separate business logic from presentation.
- Ability to use true object-oriented design for programming pages and controls
- If an ASP.NET application leaks memory, the ASP.NET runtime unloads the AppDomain hosting the erring application and reloads the application in a new AppDomain.
- Session state in ASP.NET can be saved in a Microsoft SQL Server database or in a separate process running on the same machine as the Web server or on a different machine. That way session values are not lost when the Web server is reset or the ASP.NET worker process is recycled.
- Versions of ASP.NET prior to 2.0 were criticized for their lack of standards compliance. The generated HTML and JavaScript sent to the client browser would not always validate against W3C/ECMA standards. In addition, the framework's browser detection feature sometimes incorrectly identified Web browsers other than Microsoft's own Internet Explorer as "downlevel" and returned HTML/JavaScript to these clients with some of the features removed, or sometimes crippled or broken. In version 2.0 however, all controls generate valid HTML 4.0, XHTML 1.0 (the default) or XHTML 1.1 output, depending on the site configuration. Detection of standards-compliant Web browsers is more robust and support for Cascading Style Sheets is more extensive.
- Web Server Controls: these are controls introduced by ASP.NET WebForms for providing the UI for the Web form. These controls are state managed controls and are WYSIWYG controls.
===


Batch File 
A batch file is a kind of script file in [DOS], [OS/2] and [Windows]. It consists of a series of commands to be executed by the command line interpreter, stored in a plain text file. A batch file may contain any command the interpreter accepts interactively and use constructs that enable conditional branching and looping within the batch file, such as "if", "for", "goto" and labels.

Similar to Job Control Language (JCL) and other systems on mainframe and minicomputer systems, batch files were added to ease the work required for certain regular tasks by allowing the user to set up a script to automate them. When a batch file is run, the shell program (usually COMMAND.COM or cmd.exe) reads the file and executes its commands, normally line-by-line. [Unix]-like operating systems (such as [Linux]) have a similar, but more flexible, type of file called a [shell script].
===

BLISS Programming Language
BLISS is a system programming language developed at Carnegie Mellon University by W. A. Wulf, D. B. Russell, and A. N. Habermann around 1970. It was perhaps the best known systems programming language right up until [C] made its debut a few years later. Since then, C took off and BLISS faded into obscurity. When C was in its infancy, a few projects within [Bell Labs] were debating the merits of BLISS vs. C.

BLISS is a typeless block-structured language based on expressions rather than statements, and includes constructs for exception handling, coroutines, and macros. It does not include a goto statement.

The name is variously said to be short for "Basic Language for Implementation of System Software" or "System Software Implementation Language, Backwards". It was sometimes called "Bill's Language for Implementing System Software", after Bill Wulf.

The original Carnegie Mellon compiler was notable for its extensive use of optimisations, and formed the basis of the classic book The Design of an Optimizing Compiler.

[DEC] developed and maintained BLISS compilers for the PDP-10, PDP-11, [VAX], DEC PRISM, MIPS, DEC Alpha, and Intel IA-32, and used it heavily in-house into the 1980s; most of the utility programs for the [VMS] operating system were written in BLISS-32. After its acquisition of DEC, [Compaq] developed and maintained a BLISS compiler for Intel IA-64.

===

COMAL
COMAL (Common Algorithmic Language) is a computer programming language developed in Denmark by Benedict Løfstedt and Børge R. Christensen in 1973.

The "COMAL 80 PROGRAMMING LANGUAGE REPORT" contains the formal definition of the language.

COMAL was created as a mixture of the prevalent educational programming languages of the time, [BASIC], [Pascal], and, at least in the Commodore and Compis versions, the "turtle graphics" of Logo. The language was meant to introduce structured programming elements in an environment where BASIC would normally be used.

In the early 1980s, [Apple Computer] won a contract to supply Apple II computers running [CP/M] and COMAL to Irish secondary schools.

Between 1984 - 1987 TeleNova, a susidiary of the industrial arm of the Swedish Telecoms system, Teli industrier manufactured a desktop PC called "Compis" for the educational sector. An enhanced version of COMAL was supplied as the standard programming language for this PC. Versions were created for both CP/M86 and [MS-DOS]. The latter version is available for [Windows XP].
===

DATATRIEVE
DATATRIEVE is a database query and report writer tool from [Hewlett-Packard]. It runs on the [OpenVMS] operating system, as well as several PDP-11 operating systems. DATATRIEVE's command structure is nearly plain English, and it is an early example of a Fourth Generation Language (4GL). It works against flat files, indexed files, and databases. Such data files are delimited using record definitions stored in the Common Data Dictionary (CDD), or in RMS files. DATATRIEVE is used at many OpenVMS installations.

DATATRIEVE was developed in the late 1970s and early 1980s by a team of software engineers at [DEC]'s Central Commercial Engineering facilities in Merrimack and Nashua, New Hampshire, under database architect Jim Starkey. Many of the project's engineers went on to highly visible careers in database management and other software disciplines.

DATATRIEVE adopted the wombat as its notional mascot; the program's help file responded to “HELP WOMBAT” with factual information about real world wombats.
===
JScript.NET
JScript NET is a [.NET] programming language developed by [Microsoft].

The primary differences between [JScript] and JScript.NET can be summarized as follows:

Firstly, JScript is a scripting language, and as such programs (or more suggestively, scripts) can be executed without the need to compile the code first. This is not the case with the JScript.NET command-line compiler, since this next-generation version relies on the .NET Common Language Runtime (CLR) for execution, which requires that the code be compiled to Common Intermediate Language (CIL), formerly called Microsoft Intermediate Language (MSIL), code before it can be run. Nevertheless, JScript .NET still provides full support for interpreting code at runtime (e.g., via the Function constructor or the eval function) and indeed the interpreter can be exposed by custom applications hosting the JScript .NET engine via the VSA interfaces.

Secondly, JScript has a strong foundation in Microsoft's ActiveX / COM technologies, and relies primarily on ActiveX components to provide much of its functionality (including database access via [ADO], file handling, etc.), whereas JScript.NET uses the [.NET Framework] to provide equivalent functionality. For backwards-compatibility (or for where no .NET equivalent library exists), JScript.NET still provides full access to ActiveX objects via .NET / COM interop using both the ActiveXObject constructor and the standard methods of the .NET Type class.

Although the .NET Framework and .NET languages such as [C#] and [Visual Basic.NET] have seen widespread adoption, JScript.NET has never received much attention, by the media or by developers. It is not supported in Microsoft's premier development tool, Visual Studio .NET. However, ASP.NET supports JScript.NET.
===

Miva Script
Miva Script is a proprietary computer scripting language mainly used for internet applications such as [e-commerce].
Today it is developed by [Miva Merchant], based in San Diego, California. Although quite a number of web hosting companies support Miva Script on their servers, it is significantly less widespread than its popular competitor [PHP].

The language was first developed under the name htmlscript by Joe Austin and others in 1995, and a company, htmlscript corporation, was formed the following year.

Miva Script is currently owned and maintained by Miva Merchant, Inc. The origins of Miva Script began in 1993 when David Haldy and Joseph Austin built the first version of HTMLScript. The first version was written in the [Perl] programming language, which was called LEHTML (Logic Enhanced HTML). Joseph Austin wrote a wrapper for it in the [C] programming language that let it start off as a root process and then downgrade itself immediately to the ownership and permissions of the owner of the script file. This wrapper made it suitable for use with his hosting service which was called Volant Turnpike at the time. Joseph Austin eventually sold Volant Turnpike to Dave Haldy. Perl allowed self-executing code, so LEHTML did not have its own expression analyzer and just parsed the expression into Perl syntax and then passed it into Perl. Volant Turnpike users liked using LEHTML, so Joseph Austin and Ron Ahern wrote an expression analyser and re-implemented the LEHTML syntax in the C programming language. Joseph Austin called the end result HTMLScript and registered the name with the USPTO. Joseph Austin, Troy McCasland and Derek Finley were the founders of the company called HTMLScript Corporation.

HTMLScript did not have the concept of a "WHILE" or "FOR" loop because of the low server processing power at the time. It would be enough to bring the whole server down if even one program ran away. So, Joseph Austin did not implement a loop in order to make it impossible for an HTMLScript server process to run away. Additionally, he implemented the "macro" in the first version of HTMLScript so that it would allow self-executing code. The macro was powerful, but it eventually had some security issues.

In 1997, Jon Burchmore extensively rewrote the language to make it more syntactically consistent, although the new engine supported both old htmlscript and new (named mivascript) syntaxes. Jon Burchmore re-wrote HTMLScript with syntax that Joe developed with the help of SoftQuad, using the emerging [XML] standard. Jon Burchmore wrote the replacement for KoolKat which then became Miva Merchant. The new end-product supported both the old HTMLScript syntax and new (named Miva Script) syntaxes.

On 14 October 1997, HTMLScript’s name was changed to Miva Script and the company name was changed to Miva. Shortly thereafter, Miva Merchant followed suit for the name of the product. The name “Miva” comes from the Egyptian hieroglyphics for the word “cat.” The word for “cat” is a combination of two symbols: milk basin followed by a quail. The milk basin is pronounced "Mee" and the quail is pronounced "Waa" which combined is how you say cat. Joseph Austin thought this was clever, as they had called KoolKat “an electronic (cat)alog.” Joseph showed it to his German friend who could not pronounce the "Waa" sound and instead kept on pronouncing it as "Va." Joseph Austin registered the domain Miva.com and filed the trademark.

In 1998, the company was renamed Miva Corporation. In 1998, the first version of Miva Merchant came out. In 2002, the Miva Script compiler was delivered, and the HTMLScript syntax and macros were dropped from the engine. Miva Corporation was sold in 2003 to a mid-cap, public company called FindWhat.[3] Subsequently, FindWhat bought the name Miva.

In 2007, Russell Carroll and a group of investors bought the original Miva technologies and customer base from Miva and started Miva Merchant, Inc.

Implementations
Miva Merchant Empresa
Empresa is the underlying engine for Miva Script. In versions numbered less than 4.0, Miva Merchant Empresa is a script interpreter available for web servers running *nix and Microsoft Windows operating systems. The most recent interpreter version is 3.9705. Interpreted Miva Script is still widely supported by many web hosts. Versions numbered 3.9x are a transitional form of the language, implementing some (but not all) of the new features found in version 4, such as arrays.

Since 4.0, Miva Merchant Empresa is a Virtual Machine for running compiled MIVA Script, again available in versions for *nix and Microsoft Windows.

The current version level 5.x added new language constructs, native SQL support, a new access-methodology for dbase3 tables, called MIVA-SQL, as well as a new templating syntax that the Empresa virtual machine can compile on the fly. Version 5.08 and later support the GD Graphics Library.

Miva Merchant Mia
Miva Merchant Mia is a version of the Empresa engine designed to run on a Windows PC as a localhost server watching a specified port. (usually 8000 or 8080). No other server software is required unless the POP and SMTP functions are required. This provides a portable, stand-alone development environment.

Miva Merchant Mia is updated with each Miva Merchant Empresa release. Like Empressa, versions prior to 4 are interpreters while 4.0+ only work with compiled script. There are a few minor differences between.

Miva Merchant Script Compiler
Miva Merchant Script Compiler was introduced in mid-2002, claiming to offer better performance and the closure of application source code. Comparability required some changes to the language, with support for the old htmlscript syntax and macros evaluated at runtime (often considered a security risk) dropped. The compiler produces a platform-independent bytecode which runs on the Miva Merchant Empresa and Miva Merchant Mia Virtual Machines (There are minor variations between Empresa and Mia virtual machines).

In May 2005, MIVA Corporation made the Script Compiler available free. In 2011 the built in licensing code was removed simplifying installation.

In August 2007, Miva Merchant was separated from its parent company as a result of a management buy-out.

February 2011 introduced the new MivaScript.com website fully documenting the latest version of the language, including the GD Graphics Library.

===
Miva, Inc.
Miva, Inc. is a privately owned ecommerce shopping cart software and hosting company with headquarters in San Diego, California and a data center in Tampa, Florida. Miva Merchant’s ecommerce software runs on its proprietary scripting language, [MIVA Script].

Miva Merchant began in 1996 as the HTMLScript Corporation. In 1997, the company released its first catalogue-based ecommerce product, KoolKat. Shortly after KoolKat’s release, the name of the company was changed to Miva, Inc, and KoolKat was renamed Miva Merchant. Since that time, there have been several updates to Miva Merchant’s core software, leading up to the most recent version, Miva Merchant 9. Just prior to the release of MM9, the company name returned to Miva, Inc.

In 2003 the company was purchased by FindWhat.com which changed its name to Miva, Inc in 2005.
===

Swift Programming Language
Swift is a multi-paradigm, compiled programming language created by [Apple Inc] for [iOS] and [OS X] development.

Swift is designed to work with Apple's [Cocoa] and [Cocoa Touch] frameworks and the large body of existing [Objective-C] (Obj-C) code written for Apple products. Swift is intended to be more resilient to erroneous code ("safer") than Objective-C, and also more concise. It is built with the LLVM compiler framework included in [Xcode] 6, and uses the Objective-C runtime, allowing C, Objective-C, C++ and Swift code to run within a single program.

Swift supports the core concepts that made Obj-C flexible, notably dynamic dispatch, widespread late binding, extensible programming and similar features. These features also have well known performance and safety trade-offs, which Swift was designed to address. For safety, Swift introduced a system that helps address common programming errors like null pointers, as well as introducing syntactic sugar to avoid the pyramid of doom that can result. For performance issues, Apple has invested considerable effort in aggressive optimisation that can flatten out method calls and accessors to eliminate this overhead. More fundamentally, Swift has added the concept of protocol extensibility, an extensibility system that can be applied to types, structs and classes, Apple promotes this as a real change in programming paradigms they refer to as protocol-oriented programming.

Swift was introduced at Apple's 2014 Worldwide Developers Conference (WWDC), It underwent a upgrade to version 1.2 during 2014, and a more major upgrade to Swift 2 at WWDC 2015. Initially a proprietary language, it was announced that Swift 2 would become open source later that year, supporting [iOS], [OS X] and [Linux].
===

Windows PowerShell
Windows PowerShell is a task automation and configuration management framework from [Microsoft], consisting of a command-line shell and associated scripting language built on the [.NET Framework]. PowerShell provides full access to COM and WMI, enabling administrators to perform administrative tasks on both local and remote Windows systems as well as WS-Management and CIM enabling management of remote Linux systems and network devices.

In PowerShell, administrative tasks are generally performed by cmdlets (pronounced command-lets), which are specialised .NET classes implementing a particular operation. Sets of cmdlets may be combined into scripts, executables (which are standalone applications), or by instantiating regular .NET classes (or WMI / COM Objects). These work by accessing data in different data stores, like the file system or registry, which are made available to the PowerShell runtime via Windows PowerShell providers.

Windows PowerShell also provides a hosting API with which the Windows PowerShell runtime can be embedded inside other applications. These applications can then use Windows PowerShell functionality to implement certain operations, including those exposed via the graphical interface. This capability has been used by Microsoft Exchange Server 2007 to expose its management functionality as PowerShell cmdlets and providers and implement the graphical management tools as PowerShell hosts which invoke the necessary cmdlets. Other Microsoft applications including Microsoft SQL Server 2008 also expose their management interface via PowerShell cmdlets. With PowerShell, graphical interface-based management applications on Windows are layered on top of Windows PowerShell. A PowerShell scripting interface for Windows products is mandated by Microsoft's Common Engineering Criteria.

Windows PowerShell includes its own extensive, console-based help, similar to man pages in [Unix] shells, via the Get-Help cmdlet and updatable with fresh content using the Update-Help cmdlet and web based content via the -online switch to Get-Help.

===
