<div class="row">
    <div class="col-lg-12 col-md-12">
        <?php echo $this->stencil->setHeadline('Continuous Integration (CI)'); ?>
        <p><strong>Continuous Integration (CI)</strong> is the practice, in software engineering, of merging all developer working copies with a shared mainline several times a day. It was first named and proposed by <strong>Grady Booch</strong> in his method, but he did not advocate integrating several times per day. It was adopted as part of <?php echo $this->stencil->addLink('Extreme Programming', 'PMA'); ?> (XP), which did advocate integrating more than once per day, perhaps as many as tens of times per day. The main aim of CI is to prevent integration problems, referred to as "integration hell" in early descriptions of XP. CI isn't universally accepted as an improvement over frequent integration, so it is important to distinguish between the two as there is disagreement about the virtues of each.</p>
        <p>CI was originally intended to be used in combination with automated unit tests written through the practices of <?php echo $this->stencil->addLink('Test Driven Development', 'PMA'); ?>. Initially this was conceived of as running all unit tests in the developer's local environment and verifying they all passed before committing to the mainline. This helps avoid one developer's work-in-progress breaking another developer's copy. If necessary, partially complete features can be disabled before committing using feature toggles.</p>
        <p>Later elaborations of the concept introduced build servers, which automatically ran the unit tests periodically or even after every commit and report the results to the developers. The use of build servers (not necessarily running unit tests) had already been practised by some teams outside the XP community. Nowadays, many organisations have adopted CI without adopting all of XP.</p>
        <p>In addition to automated unit tests, organisations using CI typically use a build server to implement continuous processes of applying quality control in general - small pieces of effort, applied frequently. In addition to running the unit and integration tests, such processes run additional static and dynamic tests, measure and profile performance, extract and format documentation from the source code and facilitate manual QA processes. This continuous application of quality control aims to improve the quality of software, and to reduce the time taken to deliver it, by replacing the traditional practice of applying quality control after completing all development. This is very similar to the original idea of integrating more frequently to make integration easier, only applied to QA processes.</p>
        <p>In the same vein, the practice of continuous delivery further extends CI by making sure the software checked in on the mainline is always in a state that can be deployed to users and makes the actual deployment process very rapid.</p>
    </div>
</div>
