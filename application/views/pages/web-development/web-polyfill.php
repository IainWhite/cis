<div class="row">
    <div class="col-lg-12 col-md-12">
        <?php echo $this->stencil->setHeadline('Web Polyfill'); ?>
        <p>In web development, a <strong>polyfill</strong> (or <strong>polyfiller</strong>) is downloadable code which provides facilities that are not built into a <?php echo $this->stencil->addLink('Web browser', 'WD'); ?>. It implements technology that a developer expects the browser to provide natively, providing a more uniform API landscape. For example, many features of <?php echo $this->stencil->addLink('HTML5', 'WD'); ?> are not supported by versions of <?php echo $this->stencil->addLink('Internet Explorer', 'Wb'); ?> older than version 8 or 9, but can be used by web pages if those pages install a polyfill. <strong>Web shims</strong> and <?php echo $this->stencil->addLink('HTML5 Shivs', 'WD'); ?> are related concepts.</p>
        <p>The term originated with Remy Sharp who required a word that meant "<em>replicate an API using JavaScript (or <?php echo $this->stencil->addLink('Flash', 'WD'); ?> or whatever) if the browser doesnâ€™t have it natively</em>" while co-writing the book '<strong>Introducing HTML5</strong>' in 2009. <?php echo $this->stencil->addLink('Shim', 'SD'); ?>, to him, meant a piece of code that you could add that would fix some functionality, but it would most often have its own API, thus did not fulfil Sharp's terminology requirements. The terms progressive enhancement and graceful degradation similarly did not meet his needs since they didn't specifically require, nor were they specific to, JavaScript.</p>
        <p>Sharp decided upon the term polyfill that can imply filling in missing browser functionality and using any number of techniques (<em>poly</em> can mean "many" in Greek). <strong>Polyfilla</strong>, a paste used to cover up cracks and holes in walls, was also a visualisation that Sharp found fitting for the term. He has received feedback stating that the "<em>word should be changed</em>", but the term has now grown more popular amongst web developers. Sharp intentionally did not promote the term widely, only using it in specific cases and believes that it received a large amount of exposure after Paul Irish directly referenced the term in a presentation months after its inception and was helped become popular due to <?php echo $this->stencil->addLink('Modernizr', 'JS'); ?>'s "HTML5 shims &amp; polyfill" page.</p>

        <h2>Examples</h2>

        <h3>html5shiv</h3>
        <p>In <?php echo $this->stencil->addLink('IE', 'WB'); ?> versions prior to 9, unknown <?php echo $this->stencil->addLink('HTML', 'WD'); ?> elements like <code><section></code> and <code><nav></code> would be parsed as empty elements, breaking the page's nesting structure and making those elements impossible to style using <?php echo $this->stencil->addLink('CSS', 'WD'); ?>. One of the most widely used polyfills, html5shiv exploits another quirk of IE to work around this bug: calling <code>document.createElement("tagname")</code> for each of the new <?php echo $this->stencil->addLink('HTML5', 'WD'); ?> elements, which causes <?php echo $this->stencil->addLink('IE', 'WB'); ?> to parse them correctly. It also includes basic default styling for those <?php echo $this->stencil->addLink('HTML5', 'WD'); ?> elements.</p>

        <h3>-prefix-free</h3>
        <p>Though most polyfills target out-of-date browsers, some exist to simply push modern browsers forward a little bit more. <?php echo $this->stencil->addLink('Lea Verou', 'P'); ?>'s -prefix-free polyfill is such a polyfill, allowing current browsers to recognise the unprefixed versions of several <?php echo $this->stencil->addLink('CSS-3', 'WD'); ?> properties instead of requiring the developer to write out all the vendor prefixes. It reads the page's stylesheets and replaces any unprefixed properties with their prefixed counterparts recognised by the current browser.</p>

        <h3>Selectivizr</h3>
        <p>Keith Clark's Selectivizr is a popular polyfill that makes many <?php echo $this->stencil->addLink('CSS-3', 'WD'); ?> selectors work in <?php echo $this->stencil->addLink('IE 8', 'IE'); ?> and below. It reads the page's stylesheets looking for a number of known <?php echo $this->stencil->addLink('CSS-3', 'WD'); ?> selectors, then uses a JavaScript selector library to query the document for elements matching those selectors, applying the styles directly to those elements. It supports several JavaScript selector libraries such as <?php echo $this->stencil->addLink('jQuery', 'JS'); ?>.</p>

        <h3>Flexie</h3>
        <p>Possibly one of the most anticipated features of <?php echo $this->stencil->addLink('CSS-3', 'WD'); ?>, <?php echo $this->stencil->addLink('Flexible Box Layout', 'WD'); ?> (a.k.a. Flexbox) promises to be an extremely powerful tool for laying out interface elements. <?php echo $this->stencil->addLink('WebKit', 'web-developmet/layout-engines'); ?> and <?php echo $this->stencil->addLink('Mozilla', 'web-development/layout-engines'); ?> engines have supported a preliminary draft syntax for years. Flexie implements support for that same syntax in <?php echo $this->stencil->addLink('IE', 'WB'); ?> and <?php echo $this->stencil->addLink('Opera', 'WB'); ?>. However, the draft spec has undergone a drastic revision to a new (and much more powerful) syntax, which is not yet supported by Flexie. Flexie can still be used along with the old syntax, but the developer must make sure they include the new syntax for future browsers as well.</p>

        <h3>CSS3 PIE</h3>
        <p>PIE ("Progressive Internet Explorer") implements some of the most popular missing <?php echo $this->stencil->addLink('CSS-3', 'WD'); ?> box decoration properties in IE, including <code>border-radius</code> and <code>box-shadow</code> for <?php echo $this->stencil->addLink('IE 8', 'IE'); ?> and below, and linear-gradient backgrounds for <?php echo $this->stencil->addLink('IE 9', 'IE'); ?> and below. Invoked as a <?php echo $this->stencil->addLink('HTC', 'WD'); ?> behavior (a proprietary <?php echo $this->stencil->addLink('IE', 'WB'); ?> feature), it looks for the unsupported <?php echo $this->stencil->addLink('CSS-3', 'WD'); ?> properties on specific elements and renders those properties using <?php echo $this->stencil->addLink('VML', 'WD'); ?> for IE 6 <?php echo $this->stencil->addLink('IE 6', 'IE'); ?> - <?php echo $this->stencil->addLink('IE 8', 'IE'); ?> and <?php echo $this->stencil->addLink('SVG', 'WD'); ?> for <?php echo $this->stencil->addLink('IE 9', 'IE'); ?>. Its rendering is mostly indistinguishable from native browser implementations and it handles dynamic DOM modification well.</p>

        <h3>JSON 2</h3>
        <p><?php echo $this->stencil->addLink('Douglas Crockford', 'P'); ?> originally wrote <code>json2.js</code> as an API for reading and writing his (then up-and-coming) <?php echo $this->stencil->addLink('JSON', 'WD'); ?> data format. It became so widely used that browser vendors decided to implement its API natively and turn it into a de facto standard; <code>json2.js</code> was transformed from a library to a polyfill after the fact.</p>

        <h3>es5-shim</h3>
        <p>ECMAScript 5th Edition ("ES5") brings some useful new scripting features, and since they're syntactically compatible with older <?php echo $this->stencil->addLink('Javascript engines', 'WD'); ?> they can mostly be polyfilled by patching methods onto built-in JS objects. This es5-shim polyfill does it in two parts: <code>es5-shim.js</code> contains those methods that can be fully polyfilled, and <code>es5-sham.js</code> contains partial implementations of the other methods which rely too much on the underlying engine to work accurately.</p>

        <h3>FlashCanvas</h3>
        <p>FlashCanvas is an implementation of the <?php echo $this->stencil->addLink('HTML5 Canvas', 'WD'); ?> API using a <?php echo $this->stencil->addLink('Flash', 'WD'); ?> plug-in. A rare commercial polyfill, it comes in a paid version, as well as a free version, which lacks a few advanced features like shadows.</p>

        <h3>MediaElement.js</h3>
        <p>John Dyer's MediaElement.js polyfills support for <code><video></code> and <code><audio></code> elements, including the <?php echo $this->stencil->addLink('HTML5', 'WD'); ?> MediaElement API, in older browsers using Flash or <?php echo $this->stencil->addLink('Silverlight', 'WD'); ?> plug-ins. It also provides an optional media player UI for those elements, which is consistent across all browsers.</p>

        <h3>Webshims Lib</h3>
        <p>Alexander Farkas's Webshims Lib aggregates many other polyfills together into a single package and conditionally loads only those needed by the visiting browser.</p>

    </div>
</div>